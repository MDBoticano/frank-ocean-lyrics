{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNewQuote","randomIndex","Math","floor","random","state","lyrics","length","quoteIndex","viewedQuotes","indexOf","viewedQuotesArr","concat","toConsumableArray","setState","text","lyric","author","songName","album","changeBackground","bgColors","bgIndex","bgViewed","bgViewedArr","colorToSet","currentColor","newQuote","bind","assertThisInitialized","shareOnTwitter","_this2","document","title","fetch","then","response","json","data","colorInd","initialColor","console","log","catch","error","react_default","a","createElement","id","className","href","index_es","icon","faTwitter","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.699247cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// Fontawesome icons\n// import { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\n//library.add(faTwitter); // Not sure if this is necessary\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lyrics: null,\n      quoteIndex: -1,\n      viewedQuotes: [],\n      text: '',\n      author: '',\n      songName: '',\n      album: '',\n      bgColors: ['blueStripe', 'magentaStripe', 'redStripe', 'orangeStripe'],\n      currentColor: '',\n      bgIndex: -1,\n      bgViewed: []\n    };\n    // Bind functions to this\n    this.newQuote = this.newQuote.bind(this);\n    this.shareOnTwitter = this.shareOnTwitter.bind(this);\n  }\n\n  componentDidMount() {\n    // Set title\n    document.title = 'Frank Ocean Lyrics';\n\n    // Get JSON from gist\n    fetch('https://gist.githubusercontent.com/MDBoticano/d88c9ddd0eedd5d3223ff7b5bc5f0090/raw/de541631b9e409c39e8d835098c6bb01ec1f20c3/lyrics.json')\n      .then(response => response.json()) // parses data as json\n      .then((data) => {\n\n        // Generate a random index to set initial state\n        let randomIndex = Math.floor((Math.random() * data.lyrics.length));\n\n        // Generate random index for color\n        let colorInd = Math.floor((Math.random() * this.state.bgColors.length));\n\n        let colorArr = this.state.bgColors;\n        let initialColor = colorArr[colorInd];\n        console.log(initialColor);\n\n        this.setState({\n          lyrics: data.lyrics,\n          quoteIndex: randomIndex,\n          viewedQuotes: [randomIndex],\n          text: data.lyrics[randomIndex].lyric,\n          author: data.lyrics[randomIndex].author,\n          songName: data.lyrics[randomIndex].songName,\n          album: data.lyrics[randomIndex].album,\n          currentColor: initialColor,\n          bgIndex: colorInd,\n          bgViewed: [colorInd]\n        });\n\n      })\n      .catch(error => this.setState({ error }));\n  }\n\n  // New Quote: clears current quote and grabs a new one from JSON\n  newQuote() {\n    this.getNewQuote();\n    this.changeBackground();\n  }\n\n  shareOnTwitter() {\n\n  }\n\n  getNewQuote = () => {\n    let randomIndex = -1;\n\n    // Get index of a quote not equal to current quote\n    do {\n      randomIndex = Math.floor((Math.random() * this.state.lyrics.length));\n    }\n    // Keep looking if it's the same index as our current quote or if the \n    // randomized index exists in our viewedQuotes array\n    while (randomIndex === this.state.quoteIndex ||\n      this.state.viewedQuotes.indexOf(randomIndex) >= 0);\n\n    //console.log(this.state.viewedQuotes.indexOf(randomIndex));\n\n    let viewedQuotesArr = [...this.state.viewedQuotes, randomIndex];\n\n    // If we've gone through every quote, forget which quotes we've seen\n    if (viewedQuotesArr.length === this.state.lyrics.length) {\n      viewedQuotesArr = [];\n    }\n    //console.log(viewedQuotesArr);\n\n    // Set new quote data\n    this.setState({\n      quoteIndex: randomIndex,\n      viewedQuotes: viewedQuotesArr,\n      text: this.state.lyrics[randomIndex].lyric,\n      author: this.state.lyrics[randomIndex].author,\n      songName: this.state.lyrics[randomIndex].songName,\n      album: this.state.lyrics[randomIndex].album,\n    });\n  }\n\n  changeBackground = () => {\n    let randomIndex = -1;\n\n    // Get index of a quote not equal to current color\n    do {\n      randomIndex = Math.floor((Math.random() * this.state.bgColors.length));\n    } while (randomIndex === this.state.bgIndex ||\n      this.state.bgViewed.indexOf(randomIndex) >= 0);\n\n    let bgViewedArr = [...this.state.bgViewed, randomIndex];\n    // console.log(bgViewedArr);\n\n     // If we've gone through every quote, forget which quotes we've seen\n     if (bgViewedArr.length === this.state.bgColors.length) {\n      //console.log(\"reset colors viewed\");\n      bgViewedArr = [];\n    }\n\n    let colorToSet = this.state.bgColors[randomIndex];\n    //console.log(colorToSet);\n\n    this.setState({\n      currentColor: colorToSet,\n      bgIndex: randomIndex,\n      bgViewed: bgViewedArr      \n    });\n  }\n\n  // Render\n  render() {\n    return (\n      <div id=\"wrapper\">\n\n        <div id=\"top-stripes\">\n          <div id=\"stripe-1\" className=\"top-stripe\"></div>\n          <div id=\"stripe-2\" className=\"top-stripe\"></div>\n          <div id=\"stripe-3\" className=\"top-stripe\"></div>\n          <div id=\"stripe-4\" className=\"top-stripe\" ></div>\n        </div>\n\n        <div id=\"quote-box\">\n\n          <div id=\"page-title\">\n            <p id=\"author\">Lyrics by {this.state.author}</p>\n          </div>\n\n          {/* text == lyric */}\n          <div id=\"lyric-section\">\n            <p id=\"text\">{this.state.text}</p>\n          </div>\n\n          <div id=\"horizontal-bar\" className={this.state.currentColor}></div>\n\n          <div id=\"song-details-section\">\n            <p id=\"songName\">{this.state.songName}</p>\n            <p id=\"album\">{this.state.album}</p>\n          </div>\n\n          {/* Share + new lyric */}\n          <div id=\"box-buttons\">\n\n            <button>\n              <a id=\"tweet-quote\" className=\"button\" href=\"twitter.com/intent/\">\n                <FontAwesomeIcon id=\"tweet-icon\" icon={faTwitter} />\n              </a>\n            </button>\n\n            <button id=\"new-quote\" onClick={this.newQuote}>\n              New Lyric\n            </button>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}