{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNewQuote","randomIndex","Math","floor","random","state","lyrics","length","quoteIndex","viewedQuotes","indexOf","console","log","viewedQuotesArr","concat","toConsumableArray","setState","text","lyric","author","songName","album","changeBackground","newQuote","bind","assertThisInitialized","shareOnTwitter","_this2","fetch","then","response","json","data","catch","error","react_default","a","createElement","id","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QA8HeA,qBA1Hb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAkDRQ,YAAc,WACZ,IAAIC,GAAe,EAQnB,GACEA,EAAcC,KAAKC,MAAOD,KAAKE,SAAWX,EAAKY,MAAMC,OAAOC,cAGvDN,IAAgBR,EAAKY,MAAMG,YAChCf,EAAKY,MAAMI,aAAaC,QAAQT,IAAgB,GAElDU,QAAQC,IAAInB,EAAKY,MAAMI,aAAaC,QAAQT,IAE5C,IAAIY,EAAe,GAAAC,OAAApB,OAAAqB,EAAA,EAAArB,CAAOD,EAAKY,MAAMI,cAAlB,CAAgCR,IAG/CY,EAAgBN,SAAWd,EAAKY,MAAMC,OAAOC,SAE/CM,EAAkB,IAQpBpB,EAAKuB,SAAS,CACZR,WAAYP,EACZQ,aAAcI,EACdI,KAAMxB,EAAKY,MAAMC,OAAOL,GAAaiB,MACrCC,OAAQ1B,EAAKY,MAAMC,OAAOL,GAAakB,OACvCC,SAAU3B,EAAKY,MAAMC,OAAOL,GAAamB,SACzCC,MAAO5B,EAAKY,MAAMC,OAAOL,GAAaoB,SAxFvB5B,EA6FnB6B,iBAAmB,aA3FjB7B,EAAKY,MAAQ,CACXC,OAAQ,KACRE,YAAa,EACbC,aAAc,GACdQ,KAAM,GACNE,OAAQ,GACRC,SAAU,GACVC,MAAO,IAGT5B,EAAK8B,SAAW9B,EAAK8B,SAASC,KAAd9B,OAAA+B,EAAA,EAAA/B,CAAAD,IAChBA,EAAKiC,eAAiBjC,EAAKiC,eAAeF,KAApB9B,OAAA+B,EAAA,EAAA/B,CAAAD,IAbLA,oFAiBE,IAAAkC,EAAA/B,KAEnBgC,MAAM,2IAEHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GAGL,IAAI/B,EAAcC,KAAKC,MAAOD,KAAKE,SAAW4B,EAAK1B,OAAOC,QAE1DoB,EAAKX,SAAS,CACZV,OAAQ0B,EAAK1B,OACbE,WAAYP,EACZQ,aAAc,CAACR,GACfgB,KAAMe,EAAK1B,OAAOL,GAAaiB,MAC/BC,OAAQa,EAAK1B,OAAOL,GAAakB,OACjCC,SAAUY,EAAK1B,OAAOL,GAAamB,SACnCC,MAAOW,EAAK1B,OAAOL,GAAaoB,UAGnCY,MAAM,SAAAC,GAAK,OAAIP,EAAKX,SAAS,CAAEkB,+CAMlCtC,KAAKI,cACLJ,KAAK0B,8FAuDL,OACEa,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aAGNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACNH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYC,QAAS3C,KAAK2B,UAArC,cAMFY,EAAAC,EAAAC,cAAA,MAAIC,GAAG,QAAQ1C,KAAKS,MAAMY,MAC1BkB,EAAAC,EAAAC,cAAA,KAAGC,GAAG,YAAY1C,KAAKS,MAAMe,UAC7Be,EAAAC,EAAAC,cAAA,KAAGC,GAAG,SAAS1C,KAAKS,MAAMgB,OAC1Bc,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UAAU1C,KAAKS,MAAMc,iBAnHnBqB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.a768a5f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lyrics: null,\n      quoteIndex: -1,\n      viewedQuotes: [],\n      text: '',\n      author: '',\n      songName: '',\n      album: ''\n    };\n    // Bind functions to this\n    this.newQuote = this.newQuote.bind(this);\n    this.shareOnTwitter = this.shareOnTwitter.bind(this);\n  }\n\n\n  componentWillMount() {\n    // Get JSON from gist\n    fetch('https://gist.githubusercontent.com/MDBoticano/d88c9ddd0eedd5d3223ff7b5bc5f0090/raw/d90344093909f16a86cc999efa76e0df97d0547f/lyrics.json')\n\n      .then(response => response.json()) // parses data as json\n      .then((data) => {\n\n        // Generate a random index to set initial state\n        let randomIndex = Math.floor((Math.random() * data.lyrics.length));\n\n        this.setState({\n          lyrics: data.lyrics,\n          quoteIndex: randomIndex,\n          viewedQuotes: [randomIndex],\n          text: data.lyrics[randomIndex].lyric,\n          author: data.lyrics[randomIndex].author,\n          songName: data.lyrics[randomIndex].songName,\n          album: data.lyrics[randomIndex].album,\n        });\n      })\n      .catch(error => this.setState({ error }));\n  }\n\n\n  // New Quote: clears current quote and grabs a new one from JSON\n  newQuote() {\n    this.getNewQuote();\n    this.changeBackground();\n  }\n\n  shareOnTwitter() {\n\n  }\n\n  getNewQuote = () => {\n    let randomIndex = -1;\n\n    //console.log(\"clicked\");\n\n\n\n\n    // Get index of a quote not equal to current quote\n    do {\n      randomIndex = Math.floor((Math.random() * this.state.lyrics.length));\n    }\n    // Keep looking if it's the same index as our current quote or if the randomized index exists in our viewedQuotes array\n    while (randomIndex === this.state.quoteIndex ||\n      this.state.viewedQuotes.indexOf(randomIndex) >= 0);\n\n    console.log(this.state.viewedQuotes.indexOf(randomIndex));\n\n    let viewedQuotesArr = [...this.state.viewedQuotes, randomIndex];\n\n    // If we've gone through every quote, forget which quotes we've seen\n    if (viewedQuotesArr.length === this.state.lyrics.length) {\n\n      viewedQuotesArr = [];\n\n      //console.log('reset viewed quotes');\n    }\n\n    //console.log(viewedQuotesArr);\n\n    // Set new quote data\n    this.setState({\n      quoteIndex: randomIndex,\n      viewedQuotes: viewedQuotesArr,\n      text: this.state.lyrics[randomIndex].lyric,\n      author: this.state.lyrics[randomIndex].author,\n      songName: this.state.lyrics[randomIndex].songName,\n      album: this.state.lyrics[randomIndex].album,\n    });\n\n  }\n\n  changeBackground = () => {\n\n  }\n\n  // Render\n  render() {\n    return (\n      <div id=\"wrapper\">\n        <div id=\"quote-box\">\n\n          {/* Share + new lyric */}\n          <div id=\"box-buttons\">\n            <button id=\"new-quote\" onClick={this.newQuote}>\n              New Lyric\n            </button>\n          </div>\n\n          {/* text == lyric */}\n          <h2 id=\"text\">{this.state.text}</h2>\n          <p id=\"songName\">{this.state.songName}</p>\n          <p id=\"album\">{this.state.album}</p>\n          <p id=\"author\">{this.state.author}</p>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}